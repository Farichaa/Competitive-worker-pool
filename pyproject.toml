[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "concurrent-worker-pool"
version = "1.0.0"
description = "Высокопроизводительный конкурентный пул воркеров с поддержкой каналов задач, graceful shutdown и ретраев с backoff"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Worker Pool Team", email = "team@workerpool.example.com"}
]
maintainers = [
    {name = "Worker Pool Team", email = "team@workerpool.example.com"}
]
keywords = ["concurrent", "worker", "pool", "thread", "pool", "task", "queue", "retry", "backoff", "graceful", "shutdown"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
    "Topic :: System :: Networking",
]
requires-python = ">=3.8"
dependencies = [
    "psutil>=5.9.0",
    "pyyaml>=6.0",
    "requests>=2.28.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "isort>=5.12.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
]
monitoring = [
    "prometheus-client>=0.15.0",
]
cli = [
    "click>=8.1.0",
    "rich>=13.0.0",
]

[project.scripts]
worker-pool-examples = "scripts.run_examples:main"
worker-pool-tests = "scripts.run_tests:main"

[project.urls]
Homepage = "https://github.com/example/concurrent-worker-pool"
Documentation = "https://concurrent-worker-pool.readthedocs.io/"
Repository = "https://github.com/example/concurrent-worker-pool"
"Bug Tracker" = "https://github.com/example/concurrent-worker-pool/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
worker_pool = ["config/*.yaml", "config/*.json"]

# Black конфигурация
[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort конфигурация
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# mypy конфигурация
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "psutil.*",
    "yaml.*",
    "requests.*",
]
ignore_missing_imports = true

# pytest конфигурация
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# coverage конфигурация
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
